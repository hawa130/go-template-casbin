// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hawa130/computility-cloud/ent/predicate"
	"github.com/hawa130/computility-cloud/ent/publickey"
)

// PublicKeyUpdate is the builder for updating PublicKey entities.
type PublicKeyUpdate struct {
	config
	hooks    []Hook
	mutation *PublicKeyMutation
}

// Where appends a list predicates to the PublicKeyUpdate builder.
func (pku *PublicKeyUpdate) Where(ps ...predicate.PublicKey) *PublicKeyUpdate {
	pku.mutation.Where(ps...)
	return pku
}

// SetUpdatedAt sets the "updated_at" field.
func (pku *PublicKeyUpdate) SetUpdatedAt(t time.Time) *PublicKeyUpdate {
	pku.mutation.SetUpdatedAt(t)
	return pku
}

// SetKey sets the "key" field.
func (pku *PublicKeyUpdate) SetKey(s string) *PublicKeyUpdate {
	pku.mutation.SetKey(s)
	return pku
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (pku *PublicKeyUpdate) SetNillableKey(s *string) *PublicKeyUpdate {
	if s != nil {
		pku.SetKey(*s)
	}
	return pku
}

// SetName sets the "name" field.
func (pku *PublicKeyUpdate) SetName(s string) *PublicKeyUpdate {
	pku.mutation.SetName(s)
	return pku
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pku *PublicKeyUpdate) SetNillableName(s *string) *PublicKeyUpdate {
	if s != nil {
		pku.SetName(*s)
	}
	return pku
}

// ClearName clears the value of the "name" field.
func (pku *PublicKeyUpdate) ClearName() *PublicKeyUpdate {
	pku.mutation.ClearName()
	return pku
}

// SetDescription sets the "description" field.
func (pku *PublicKeyUpdate) SetDescription(s string) *PublicKeyUpdate {
	pku.mutation.SetDescription(s)
	return pku
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pku *PublicKeyUpdate) SetNillableDescription(s *string) *PublicKeyUpdate {
	if s != nil {
		pku.SetDescription(*s)
	}
	return pku
}

// ClearDescription clears the value of the "description" field.
func (pku *PublicKeyUpdate) ClearDescription() *PublicKeyUpdate {
	pku.mutation.ClearDescription()
	return pku
}

// SetType sets the "type" field.
func (pku *PublicKeyUpdate) SetType(s string) *PublicKeyUpdate {
	pku.mutation.SetType(s)
	return pku
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pku *PublicKeyUpdate) SetNillableType(s *string) *PublicKeyUpdate {
	if s != nil {
		pku.SetType(*s)
	}
	return pku
}

// ClearType clears the value of the "type" field.
func (pku *PublicKeyUpdate) ClearType() *PublicKeyUpdate {
	pku.mutation.ClearType()
	return pku
}

// SetStatus sets the "status" field.
func (pku *PublicKeyUpdate) SetStatus(s string) *PublicKeyUpdate {
	pku.mutation.SetStatus(s)
	return pku
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pku *PublicKeyUpdate) SetNillableStatus(s *string) *PublicKeyUpdate {
	if s != nil {
		pku.SetStatus(*s)
	}
	return pku
}

// ClearStatus clears the value of the "status" field.
func (pku *PublicKeyUpdate) ClearStatus() *PublicKeyUpdate {
	pku.mutation.ClearStatus()
	return pku
}

// SetExpiredAt sets the "expired_at" field.
func (pku *PublicKeyUpdate) SetExpiredAt(t time.Time) *PublicKeyUpdate {
	pku.mutation.SetExpiredAt(t)
	return pku
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (pku *PublicKeyUpdate) SetNillableExpiredAt(t *time.Time) *PublicKeyUpdate {
	if t != nil {
		pku.SetExpiredAt(*t)
	}
	return pku
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (pku *PublicKeyUpdate) ClearExpiredAt() *PublicKeyUpdate {
	pku.mutation.ClearExpiredAt()
	return pku
}

// Mutation returns the PublicKeyMutation object of the builder.
func (pku *PublicKeyUpdate) Mutation() *PublicKeyMutation {
	return pku.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pku *PublicKeyUpdate) Save(ctx context.Context) (int, error) {
	if err := pku.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pku.sqlSave, pku.mutation, pku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pku *PublicKeyUpdate) SaveX(ctx context.Context) int {
	affected, err := pku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pku *PublicKeyUpdate) Exec(ctx context.Context) error {
	_, err := pku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pku *PublicKeyUpdate) ExecX(ctx context.Context) {
	if err := pku.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pku *PublicKeyUpdate) defaults() error {
	if _, ok := pku.mutation.UpdatedAt(); !ok {
		if publickey.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized publickey.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := publickey.UpdateDefaultUpdatedAt()
		pku.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (pku *PublicKeyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(publickey.Table, publickey.Columns, sqlgraph.NewFieldSpec(publickey.FieldID, field.TypeString))
	if ps := pku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pku.mutation.UpdatedAt(); ok {
		_spec.SetField(publickey.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pku.mutation.Key(); ok {
		_spec.SetField(publickey.FieldKey, field.TypeString, value)
	}
	if value, ok := pku.mutation.Name(); ok {
		_spec.SetField(publickey.FieldName, field.TypeString, value)
	}
	if pku.mutation.NameCleared() {
		_spec.ClearField(publickey.FieldName, field.TypeString)
	}
	if value, ok := pku.mutation.Description(); ok {
		_spec.SetField(publickey.FieldDescription, field.TypeString, value)
	}
	if pku.mutation.DescriptionCleared() {
		_spec.ClearField(publickey.FieldDescription, field.TypeString)
	}
	if value, ok := pku.mutation.GetType(); ok {
		_spec.SetField(publickey.FieldType, field.TypeString, value)
	}
	if pku.mutation.TypeCleared() {
		_spec.ClearField(publickey.FieldType, field.TypeString)
	}
	if value, ok := pku.mutation.Status(); ok {
		_spec.SetField(publickey.FieldStatus, field.TypeString, value)
	}
	if pku.mutation.StatusCleared() {
		_spec.ClearField(publickey.FieldStatus, field.TypeString)
	}
	if value, ok := pku.mutation.ExpiredAt(); ok {
		_spec.SetField(publickey.FieldExpiredAt, field.TypeTime, value)
	}
	if pku.mutation.ExpiredAtCleared() {
		_spec.ClearField(publickey.FieldExpiredAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publickey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pku.mutation.done = true
	return n, nil
}

// PublicKeyUpdateOne is the builder for updating a single PublicKey entity.
type PublicKeyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PublicKeyMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (pkuo *PublicKeyUpdateOne) SetUpdatedAt(t time.Time) *PublicKeyUpdateOne {
	pkuo.mutation.SetUpdatedAt(t)
	return pkuo
}

// SetKey sets the "key" field.
func (pkuo *PublicKeyUpdateOne) SetKey(s string) *PublicKeyUpdateOne {
	pkuo.mutation.SetKey(s)
	return pkuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (pkuo *PublicKeyUpdateOne) SetNillableKey(s *string) *PublicKeyUpdateOne {
	if s != nil {
		pkuo.SetKey(*s)
	}
	return pkuo
}

// SetName sets the "name" field.
func (pkuo *PublicKeyUpdateOne) SetName(s string) *PublicKeyUpdateOne {
	pkuo.mutation.SetName(s)
	return pkuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pkuo *PublicKeyUpdateOne) SetNillableName(s *string) *PublicKeyUpdateOne {
	if s != nil {
		pkuo.SetName(*s)
	}
	return pkuo
}

// ClearName clears the value of the "name" field.
func (pkuo *PublicKeyUpdateOne) ClearName() *PublicKeyUpdateOne {
	pkuo.mutation.ClearName()
	return pkuo
}

// SetDescription sets the "description" field.
func (pkuo *PublicKeyUpdateOne) SetDescription(s string) *PublicKeyUpdateOne {
	pkuo.mutation.SetDescription(s)
	return pkuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pkuo *PublicKeyUpdateOne) SetNillableDescription(s *string) *PublicKeyUpdateOne {
	if s != nil {
		pkuo.SetDescription(*s)
	}
	return pkuo
}

// ClearDescription clears the value of the "description" field.
func (pkuo *PublicKeyUpdateOne) ClearDescription() *PublicKeyUpdateOne {
	pkuo.mutation.ClearDescription()
	return pkuo
}

// SetType sets the "type" field.
func (pkuo *PublicKeyUpdateOne) SetType(s string) *PublicKeyUpdateOne {
	pkuo.mutation.SetType(s)
	return pkuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pkuo *PublicKeyUpdateOne) SetNillableType(s *string) *PublicKeyUpdateOne {
	if s != nil {
		pkuo.SetType(*s)
	}
	return pkuo
}

// ClearType clears the value of the "type" field.
func (pkuo *PublicKeyUpdateOne) ClearType() *PublicKeyUpdateOne {
	pkuo.mutation.ClearType()
	return pkuo
}

// SetStatus sets the "status" field.
func (pkuo *PublicKeyUpdateOne) SetStatus(s string) *PublicKeyUpdateOne {
	pkuo.mutation.SetStatus(s)
	return pkuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pkuo *PublicKeyUpdateOne) SetNillableStatus(s *string) *PublicKeyUpdateOne {
	if s != nil {
		pkuo.SetStatus(*s)
	}
	return pkuo
}

// ClearStatus clears the value of the "status" field.
func (pkuo *PublicKeyUpdateOne) ClearStatus() *PublicKeyUpdateOne {
	pkuo.mutation.ClearStatus()
	return pkuo
}

// SetExpiredAt sets the "expired_at" field.
func (pkuo *PublicKeyUpdateOne) SetExpiredAt(t time.Time) *PublicKeyUpdateOne {
	pkuo.mutation.SetExpiredAt(t)
	return pkuo
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (pkuo *PublicKeyUpdateOne) SetNillableExpiredAt(t *time.Time) *PublicKeyUpdateOne {
	if t != nil {
		pkuo.SetExpiredAt(*t)
	}
	return pkuo
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (pkuo *PublicKeyUpdateOne) ClearExpiredAt() *PublicKeyUpdateOne {
	pkuo.mutation.ClearExpiredAt()
	return pkuo
}

// Mutation returns the PublicKeyMutation object of the builder.
func (pkuo *PublicKeyUpdateOne) Mutation() *PublicKeyMutation {
	return pkuo.mutation
}

// Where appends a list predicates to the PublicKeyUpdate builder.
func (pkuo *PublicKeyUpdateOne) Where(ps ...predicate.PublicKey) *PublicKeyUpdateOne {
	pkuo.mutation.Where(ps...)
	return pkuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pkuo *PublicKeyUpdateOne) Select(field string, fields ...string) *PublicKeyUpdateOne {
	pkuo.fields = append([]string{field}, fields...)
	return pkuo
}

// Save executes the query and returns the updated PublicKey entity.
func (pkuo *PublicKeyUpdateOne) Save(ctx context.Context) (*PublicKey, error) {
	if err := pkuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pkuo.sqlSave, pkuo.mutation, pkuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pkuo *PublicKeyUpdateOne) SaveX(ctx context.Context) *PublicKey {
	node, err := pkuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pkuo *PublicKeyUpdateOne) Exec(ctx context.Context) error {
	_, err := pkuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pkuo *PublicKeyUpdateOne) ExecX(ctx context.Context) {
	if err := pkuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pkuo *PublicKeyUpdateOne) defaults() error {
	if _, ok := pkuo.mutation.UpdatedAt(); !ok {
		if publickey.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized publickey.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := publickey.UpdateDefaultUpdatedAt()
		pkuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (pkuo *PublicKeyUpdateOne) sqlSave(ctx context.Context) (_node *PublicKey, err error) {
	_spec := sqlgraph.NewUpdateSpec(publickey.Table, publickey.Columns, sqlgraph.NewFieldSpec(publickey.FieldID, field.TypeString))
	id, ok := pkuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PublicKey.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pkuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, publickey.FieldID)
		for _, f := range fields {
			if !publickey.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != publickey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pkuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pkuo.mutation.UpdatedAt(); ok {
		_spec.SetField(publickey.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pkuo.mutation.Key(); ok {
		_spec.SetField(publickey.FieldKey, field.TypeString, value)
	}
	if value, ok := pkuo.mutation.Name(); ok {
		_spec.SetField(publickey.FieldName, field.TypeString, value)
	}
	if pkuo.mutation.NameCleared() {
		_spec.ClearField(publickey.FieldName, field.TypeString)
	}
	if value, ok := pkuo.mutation.Description(); ok {
		_spec.SetField(publickey.FieldDescription, field.TypeString, value)
	}
	if pkuo.mutation.DescriptionCleared() {
		_spec.ClearField(publickey.FieldDescription, field.TypeString)
	}
	if value, ok := pkuo.mutation.GetType(); ok {
		_spec.SetField(publickey.FieldType, field.TypeString, value)
	}
	if pkuo.mutation.TypeCleared() {
		_spec.ClearField(publickey.FieldType, field.TypeString)
	}
	if value, ok := pkuo.mutation.Status(); ok {
		_spec.SetField(publickey.FieldStatus, field.TypeString, value)
	}
	if pkuo.mutation.StatusCleared() {
		_spec.ClearField(publickey.FieldStatus, field.TypeString)
	}
	if value, ok := pkuo.mutation.ExpiredAt(); ok {
		_spec.SetField(publickey.FieldExpiredAt, field.TypeTime, value)
	}
	if pkuo.mutation.ExpiredAtCleared() {
		_spec.ClearField(publickey.FieldExpiredAt, field.TypeTime)
	}
	_node = &PublicKey{config: pkuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pkuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publickey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pkuo.mutation.done = true
	return _node, nil
}
