// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hawa130/computility-cloud/ent/publickey"
	"github.com/hawa130/computility-cloud/ent/user"
	"github.com/rs/xid"
)

// PublicKeyCreate is the builder for creating a PublicKey entity.
type PublicKeyCreate struct {
	config
	mutation *PublicKeyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pkc *PublicKeyCreate) SetCreatedAt(t time.Time) *PublicKeyCreate {
	pkc.mutation.SetCreatedAt(t)
	return pkc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pkc *PublicKeyCreate) SetNillableCreatedAt(t *time.Time) *PublicKeyCreate {
	if t != nil {
		pkc.SetCreatedAt(*t)
	}
	return pkc
}

// SetUpdatedAt sets the "updated_at" field.
func (pkc *PublicKeyCreate) SetUpdatedAt(t time.Time) *PublicKeyCreate {
	pkc.mutation.SetUpdatedAt(t)
	return pkc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pkc *PublicKeyCreate) SetNillableUpdatedAt(t *time.Time) *PublicKeyCreate {
	if t != nil {
		pkc.SetUpdatedAt(*t)
	}
	return pkc
}

// SetKey sets the "key" field.
func (pkc *PublicKeyCreate) SetKey(s string) *PublicKeyCreate {
	pkc.mutation.SetKey(s)
	return pkc
}

// SetName sets the "name" field.
func (pkc *PublicKeyCreate) SetName(s string) *PublicKeyCreate {
	pkc.mutation.SetName(s)
	return pkc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pkc *PublicKeyCreate) SetNillableName(s *string) *PublicKeyCreate {
	if s != nil {
		pkc.SetName(*s)
	}
	return pkc
}

// SetDescription sets the "description" field.
func (pkc *PublicKeyCreate) SetDescription(s string) *PublicKeyCreate {
	pkc.mutation.SetDescription(s)
	return pkc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pkc *PublicKeyCreate) SetNillableDescription(s *string) *PublicKeyCreate {
	if s != nil {
		pkc.SetDescription(*s)
	}
	return pkc
}

// SetType sets the "type" field.
func (pkc *PublicKeyCreate) SetType(s string) *PublicKeyCreate {
	pkc.mutation.SetType(s)
	return pkc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pkc *PublicKeyCreate) SetNillableType(s *string) *PublicKeyCreate {
	if s != nil {
		pkc.SetType(*s)
	}
	return pkc
}

// SetStatus sets the "status" field.
func (pkc *PublicKeyCreate) SetStatus(s string) *PublicKeyCreate {
	pkc.mutation.SetStatus(s)
	return pkc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pkc *PublicKeyCreate) SetNillableStatus(s *string) *PublicKeyCreate {
	if s != nil {
		pkc.SetStatus(*s)
	}
	return pkc
}

// SetExpiredAt sets the "expired_at" field.
func (pkc *PublicKeyCreate) SetExpiredAt(t time.Time) *PublicKeyCreate {
	pkc.mutation.SetExpiredAt(t)
	return pkc
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (pkc *PublicKeyCreate) SetNillableExpiredAt(t *time.Time) *PublicKeyCreate {
	if t != nil {
		pkc.SetExpiredAt(*t)
	}
	return pkc
}

// SetID sets the "id" field.
func (pkc *PublicKeyCreate) SetID(x xid.ID) *PublicKeyCreate {
	pkc.mutation.SetID(x)
	return pkc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pkc *PublicKeyCreate) SetNillableID(x *xid.ID) *PublicKeyCreate {
	if x != nil {
		pkc.SetID(*x)
	}
	return pkc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pkc *PublicKeyCreate) SetUserID(id xid.ID) *PublicKeyCreate {
	pkc.mutation.SetUserID(id)
	return pkc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pkc *PublicKeyCreate) SetNillableUserID(id *xid.ID) *PublicKeyCreate {
	if id != nil {
		pkc = pkc.SetUserID(*id)
	}
	return pkc
}

// SetUser sets the "user" edge to the User entity.
func (pkc *PublicKeyCreate) SetUser(u *User) *PublicKeyCreate {
	return pkc.SetUserID(u.ID)
}

// Mutation returns the PublicKeyMutation object of the builder.
func (pkc *PublicKeyCreate) Mutation() *PublicKeyMutation {
	return pkc.mutation
}

// Save creates the PublicKey in the database.
func (pkc *PublicKeyCreate) Save(ctx context.Context) (*PublicKey, error) {
	if err := pkc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pkc.sqlSave, pkc.mutation, pkc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pkc *PublicKeyCreate) SaveX(ctx context.Context) *PublicKey {
	v, err := pkc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pkc *PublicKeyCreate) Exec(ctx context.Context) error {
	_, err := pkc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pkc *PublicKeyCreate) ExecX(ctx context.Context) {
	if err := pkc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pkc *PublicKeyCreate) defaults() error {
	if _, ok := pkc.mutation.CreatedAt(); !ok {
		if publickey.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized publickey.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := publickey.DefaultCreatedAt()
		pkc.mutation.SetCreatedAt(v)
	}
	if _, ok := pkc.mutation.UpdatedAt(); !ok {
		if publickey.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized publickey.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := publickey.DefaultUpdatedAt()
		pkc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pkc.mutation.ID(); !ok {
		if publickey.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized publickey.DefaultID (forgotten import ent/runtime?)")
		}
		v := publickey.DefaultID()
		pkc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pkc *PublicKeyCreate) check() error {
	if _, ok := pkc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PublicKey.created_at"`)}
	}
	if _, ok := pkc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PublicKey.updated_at"`)}
	}
	if _, ok := pkc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "PublicKey.key"`)}
	}
	return nil
}

func (pkc *PublicKeyCreate) sqlSave(ctx context.Context) (*PublicKey, error) {
	if err := pkc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pkc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pkc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pkc.mutation.id = &_node.ID
	pkc.mutation.done = true
	return _node, nil
}

func (pkc *PublicKeyCreate) createSpec() (*PublicKey, *sqlgraph.CreateSpec) {
	var (
		_node = &PublicKey{config: pkc.config}
		_spec = sqlgraph.NewCreateSpec(publickey.Table, sqlgraph.NewFieldSpec(publickey.FieldID, field.TypeString))
	)
	if id, ok := pkc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pkc.mutation.CreatedAt(); ok {
		_spec.SetField(publickey.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pkc.mutation.UpdatedAt(); ok {
		_spec.SetField(publickey.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pkc.mutation.Key(); ok {
		_spec.SetField(publickey.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := pkc.mutation.Name(); ok {
		_spec.SetField(publickey.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pkc.mutation.Description(); ok {
		_spec.SetField(publickey.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pkc.mutation.GetType(); ok {
		_spec.SetField(publickey.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := pkc.mutation.Status(); ok {
		_spec.SetField(publickey.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := pkc.mutation.ExpiredAt(); ok {
		_spec.SetField(publickey.FieldExpiredAt, field.TypeTime, value)
		_node.ExpiredAt = value
	}
	if nodes := pkc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   publickey.UserTable,
			Columns: []string{publickey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.public_key_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PublicKeyCreateBulk is the builder for creating many PublicKey entities in bulk.
type PublicKeyCreateBulk struct {
	config
	err      error
	builders []*PublicKeyCreate
}

// Save creates the PublicKey entities in the database.
func (pkcb *PublicKeyCreateBulk) Save(ctx context.Context) ([]*PublicKey, error) {
	if pkcb.err != nil {
		return nil, pkcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pkcb.builders))
	nodes := make([]*PublicKey, len(pkcb.builders))
	mutators := make([]Mutator, len(pkcb.builders))
	for i := range pkcb.builders {
		func(i int, root context.Context) {
			builder := pkcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PublicKeyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pkcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pkcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pkcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pkcb *PublicKeyCreateBulk) SaveX(ctx context.Context) []*PublicKey {
	v, err := pkcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pkcb *PublicKeyCreateBulk) Exec(ctx context.Context) error {
	_, err := pkcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pkcb *PublicKeyCreateBulk) ExecX(ctx context.Context) {
	if err := pkcb.Exec(ctx); err != nil {
		panic(err)
	}
}
