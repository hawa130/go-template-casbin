package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"

	"github.com/hawa130/serverx/ent"
	"github.com/hawa130/serverx/ent/publickey"
	"github.com/hawa130/serverx/ent/user"
	"github.com/hawa130/serverx/graph/reqerr"
	"github.com/hawa130/serverx/internal/auth"
	"github.com/hawa130/serverx/internal/hookx"
	"github.com/hawa130/serverx/internal/perm"
	"github.com/hawa130/serverx/internal/rule"
	"github.com/rs/xid"
)

// CreatePublicKey is the resolver for the createPublicKey field.
func (r *mutationResolver) CreatePublicKey(ctx context.Context, uid *xid.ID, input ent.CreatePublicKeyInput) (*ent.PublicKey, error) {
	u, ok := auth.FromContext(ctx)
	if !ok {
		return nil, reqerr.ErrForbidden
	}
	builder := ent.FromContext(ctx).PublicKey.Create().SetInput(input)

	// 指定了用户ID
	if uid != nil && *uid != u.ID {
		return builder.SetUserID(*uid).Save(hookx.WithCustomOwner(ctx, *uid))
	}
	// 未指定用户ID，使用当前用户
	return builder.SetUserID(u.ID).Save(rule.WithAllowContext(ctx))
}

// UpdatePublicKey is the resolver for the updatePublicKey field.
func (r *mutationResolver) UpdatePublicKey(ctx context.Context, id xid.ID, input ent.UpdatePublicKeyInput) (*ent.PublicKey, error) {
	return ent.FromContext(ctx).PublicKey.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeletePublicKey is the resolver for the deletePublicKey field.
func (r *mutationResolver) DeletePublicKey(ctx context.Context, id xid.ID) (bool, error) {
	if err := ent.FromContext(ctx).PublicKey.DeleteOneID(id).Exec(ctx); err != nil {
		return false, err
	}
	return true, nil
}

// PublicKey is the resolver for the publicKey field.
func (r *queryResolver) PublicKey(ctx context.Context, uid *xid.ID) ([]*ent.PublicKey, error) {
	id, err := auth.SelfOrAuthenticated(ctx, uid, perm.OpRead)
	if err != nil {
		return nil, err
	}

	return r.client.PublicKey.Query().
		Where(publickey.HasUserWith(user.IDEQ(*id))).
		All(rule.WithAllowContext(ctx))
}
