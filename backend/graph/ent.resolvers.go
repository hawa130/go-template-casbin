package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"

	"entgo.io/contrib/entgql"
	"github.com/hawa130/serverx/ent"
	"github.com/hawa130/serverx/internal/auth"
	"github.com/hawa130/serverx/internal/rule"
	"github.com/rs/xid"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id xid.ID) (ent.Noder, error) {
	if err := auth.AdminRequired(ctx); err != nil {
		return nil, err
	}
	return r.client.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []xid.ID) ([]ent.Noder, error) {
	if err := auth.AdminRequired(ctx); err != nil {
		return nil, err
	}
	return r.client.Noders(ctx, ids)
}

// PublicKeys is the resolver for the publicKeys field. 此函数及之后的函数均已使用指令（Directive）实现权限校验，无需在代码中手动添加权限校验逻辑
func (r *queryResolver) PublicKeys(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.PublicKeyOrder, where *ent.PublicKeyWhereInput) (*ent.PublicKeyConnection, error) {
	return r.client.PublicKey.Query().
		Paginate(rule.WithAllowContext(ctx), after, first, before, last,
			ent.WithPublicKeyOrder(orderBy),
			ent.WithPublicKeyFilter(where.Filter),
		)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.UserOrder, where *ent.UserWhereInput) (*ent.UserConnection, error) {
	return r.client.User.Query().
		Paginate(rule.WithAllowContext(ctx), after, first, before, last,
			ent.WithUserOrder(orderBy),
			ent.WithUserFilter(where.Filter),
		)
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
