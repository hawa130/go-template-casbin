directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type CasbinRule implements Node {
  id: ID!
  ptype: String!
  v0: String!
  v1: String!
  v2: String!
  v3: String!
  v4: String!
  v5: String!
}
"""
CasbinRuleWhereInput is used for filtering CasbinRule objects.
Input was generated by ent.
"""
input CasbinRuleWhereInput {
  not: CasbinRuleWhereInput
  and: [CasbinRuleWhereInput!]
  or: [CasbinRuleWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  Ptype field predicates
  """
  ptype: String
  ptypeNEQ: String
  ptypeIn: [String!]
  ptypeNotIn: [String!]
  ptypeGT: String
  ptypeGTE: String
  ptypeLT: String
  ptypeLTE: String
  ptypeContains: String
  ptypeHasPrefix: String
  ptypeHasSuffix: String
  ptypeEqualFold: String
  ptypeContainsFold: String
  """
  V0 field predicates
  """
  v0: String
  v0NEQ: String
  v0In: [String!]
  v0NotIn: [String!]
  v0GT: String
  v0GTE: String
  v0LT: String
  v0LTE: String
  v0Contains: String
  v0HasPrefix: String
  v0HasSuffix: String
  v0EqualFold: String
  v0ContainsFold: String
  """
  V1 field predicates
  """
  v1: String
  v1NEQ: String
  v1In: [String!]
  v1NotIn: [String!]
  v1GT: String
  v1GTE: String
  v1LT: String
  v1LTE: String
  v1Contains: String
  v1HasPrefix: String
  v1HasSuffix: String
  v1EqualFold: String
  v1ContainsFold: String
  """
  V2 field predicates
  """
  v2: String
  v2NEQ: String
  v2In: [String!]
  v2NotIn: [String!]
  v2GT: String
  v2GTE: String
  v2LT: String
  v2LTE: String
  v2Contains: String
  v2HasPrefix: String
  v2HasSuffix: String
  v2EqualFold: String
  v2ContainsFold: String
  """
  V3 field predicates
  """
  v3: String
  v3NEQ: String
  v3In: [String!]
  v3NotIn: [String!]
  v3GT: String
  v3GTE: String
  v3LT: String
  v3LTE: String
  v3Contains: String
  v3HasPrefix: String
  v3HasSuffix: String
  v3EqualFold: String
  v3ContainsFold: String
  """
  V4 field predicates
  """
  v4: String
  v4NEQ: String
  v4In: [String!]
  v4NotIn: [String!]
  v4GT: String
  v4GTE: String
  v4LT: String
  v4LTE: String
  v4Contains: String
  v4HasPrefix: String
  v4HasSuffix: String
  v4EqualFold: String
  v4ContainsFold: String
  """
  V5 field predicates
  """
  v5: String
  v5NEQ: String
  v5In: [String!]
  v5NotIn: [String!]
  v5GT: String
  v5GTE: String
  v5LT: String
  v5LTE: String
  v5Contains: String
  v5HasPrefix: String
  v5HasSuffix: String
  v5EqualFold: String
  v5ContainsFold: String
}
"""
CreatePublicKeyInput is used for create PublicKey object.
Input was generated by ent.
"""
input CreatePublicKeyInput {
  key: String!
  name: String
  description: String
  type: String
  status: String
  expiredAt: Time
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  nickname: String
  username: String
  email: String
  phone: String!
  password: String!
  parentID: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/hawa130/computility-cloud/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type PublicKey implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  key: String!
  name: String
  description: String
  type: String
  status: String
  expiredAt: Time
  user: User
}
"""
A connection to a list of items.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  The item at the end of the edge.
  """
  node: PublicKey
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for PublicKey connections
"""
input PublicKeyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order PublicKeys.
  """
  field: PublicKeyOrderField!
}
"""
Properties by which PublicKey connections can be ordered.
"""
enum PublicKeyOrderField {
  CREATED_AT
  UPDATED_AT
}
"""
PublicKeyWhereInput is used for filtering PublicKey objects.
Input was generated by ent.
"""
input PublicKeyWhereInput {
  not: PublicKeyWhereInput
  and: [PublicKeyWhereInput!]
  or: [PublicKeyWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  key field predicates
  """
  key: String
  keyNEQ: String
  keyIn: [String!]
  keyNotIn: [String!]
  keyGT: String
  keyGTE: String
  keyLT: String
  keyLTE: String
  keyContains: String
  keyHasPrefix: String
  keyHasSuffix: String
  keyEqualFold: String
  keyContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  type field predicates
  """
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeIsNil: Boolean
  typeNotNil: Boolean
  typeEqualFold: String
  typeContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  expired_at field predicates
  """
  expiredAt: Time
  expiredAtNEQ: Time
  expiredAtIn: [Time!]
  expiredAtNotIn: [Time!]
  expiredAtGT: Time
  expiredAtGTE: Time
  expiredAtLT: Time
  expiredAtLTE: Time
  expiredAtIsNil: Boolean
  expiredAtNotNil: Boolean
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  publicKeys(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for PublicKeys returned from the connection.
    """
    orderBy: PublicKeyOrder

    """
    Filtering options for PublicKeys returned from the connection.
    """
    where: PublicKeyWhereInput
  ): PublicKeyConnection! @admin
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection! @admin
}
"""
The builtin Time type
"""
scalar Time
"""
UpdatePublicKeyInput is used for update PublicKey object.
Input was generated by ent.
"""
input UpdatePublicKeyInput {
  key: String
  name: String
  clearName: Boolean
  description: String
  clearDescription: Boolean
  type: String
  clearType: Boolean
  status: String
  clearStatus: Boolean
  expiredAt: Time
  clearExpiredAt: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  nickname: String
  clearNickname: Boolean
  username: String
  clearUsername: Boolean
  email: String
  clearEmail: Boolean
  phone: String
}
type User implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  nickname: String
  username: String
  email: String
  phone: String!
  children: [User!]
  parent: User
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  CREATED_AT
  UPDATED_AT
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  nickname field predicates
  """
  nickname: String
  nicknameNEQ: String
  nicknameIn: [String!]
  nicknameNotIn: [String!]
  nicknameGT: String
  nicknameGTE: String
  nicknameLT: String
  nicknameLTE: String
  nicknameContains: String
  nicknameHasPrefix: String
  nicknameHasSuffix: String
  nicknameIsNil: Boolean
  nicknameNotNil: Boolean
  nicknameEqualFold: String
  nicknameContainsFold: String
  """
  username field predicates
  """
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameIsNil: Boolean
  usernameNotNil: Boolean
  usernameEqualFold: String
  usernameContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIsNil: Boolean
  emailNotNil: Boolean
  emailEqualFold: String
  emailContainsFold: String
  """
  phone field predicates
  """
  phone: String
  phoneNEQ: String
  phoneIn: [String!]
  phoneNotIn: [String!]
  phoneGT: String
  phoneGTE: String
  phoneLT: String
  phoneLTE: String
  phoneContains: String
  phoneHasPrefix: String
  phoneHasSuffix: String
  phoneEqualFold: String
  phoneContainsFold: String
  """
  children edge predicates
  """
  hasChildren: Boolean
  hasChildrenWith: [UserWhereInput!]
  """
  parent edge predicates
  """
  hasParent: Boolean
  hasParentWith: [UserWhereInput!]
}
