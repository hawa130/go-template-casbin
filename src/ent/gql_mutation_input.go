// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/rs/xid"
)

// CreatePublicKeyInput represents a mutation input for creating publickeys.
type CreatePublicKeyInput struct {
	Key         string
	Name        *string
	Description *string
	Type        *string
	Status      *string
	ExpiredAt   *time.Time
}

// Mutate applies the CreatePublicKeyInput on the PublicKeyMutation builder.
func (i *CreatePublicKeyInput) Mutate(m *PublicKeyMutation) {
	m.SetKey(i.Key)
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.ExpiredAt; v != nil {
		m.SetExpiredAt(*v)
	}
}

// SetInput applies the change-set in the CreatePublicKeyInput on the PublicKeyCreate builder.
func (c *PublicKeyCreate) SetInput(i CreatePublicKeyInput) *PublicKeyCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePublicKeyInput represents a mutation input for updating publickeys.
type UpdatePublicKeyInput struct {
	Key              *string
	ClearName        bool
	Name             *string
	ClearDescription bool
	Description      *string
	ClearType        bool
	Type             *string
	ClearStatus      bool
	Status           *string
	ClearExpiredAt   bool
	ExpiredAt        *time.Time
}

// Mutate applies the UpdatePublicKeyInput on the PublicKeyMutation builder.
func (i *UpdatePublicKeyInput) Mutate(m *PublicKeyMutation) {
	if v := i.Key; v != nil {
		m.SetKey(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearType {
		m.ClearType()
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearExpiredAt {
		m.ClearExpiredAt()
	}
	if v := i.ExpiredAt; v != nil {
		m.SetExpiredAt(*v)
	}
}

// SetInput applies the change-set in the UpdatePublicKeyInput on the PublicKeyUpdate builder.
func (c *PublicKeyUpdate) SetInput(i UpdatePublicKeyInput) *PublicKeyUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePublicKeyInput on the PublicKeyUpdateOne builder.
func (c *PublicKeyUpdateOne) SetInput(i UpdatePublicKeyInput) *PublicKeyUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Nickname *string
	Username *string
	Email    *string
	Phone    string
	Password string
	ParentID *xid.ID
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.Nickname; v != nil {
		m.SetNickname(*v)
	}
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	m.SetPhone(i.Phone)
	m.SetPassword(i.Password)
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	ClearNickname bool
	Nickname      *string
	ClearUsername bool
	Username      *string
	ClearEmail    bool
	Email         *string
	Phone         *string
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if i.ClearNickname {
		m.ClearNickname()
	}
	if v := i.Nickname; v != nil {
		m.SetNickname(*v)
	}
	if i.ClearUsername {
		m.ClearUsername()
	}
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if i.ClearEmail {
		m.ClearEmail()
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
