// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"time"

	"github.com/hawa130/computility-cloud/ent/casbinrule"
	"github.com/hawa130/computility-cloud/ent/predicate"
	"github.com/hawa130/computility-cloud/ent/publickey"
	"github.com/hawa130/computility-cloud/ent/user"
	"github.com/rs/xid"
)

// CasbinRuleWhereInput represents a where input for filtering CasbinRule queries.
type CasbinRuleWhereInput struct {
	Predicates []predicate.CasbinRule  `json:"-"`
	Not        *CasbinRuleWhereInput   `json:"not,omitempty"`
	Or         []*CasbinRuleWhereInput `json:"or,omitempty"`
	And        []*CasbinRuleWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "Ptype" field predicates.
	Ptype             *string  `json:"ptype,omitempty"`
	PtypeNEQ          *string  `json:"ptypeNEQ,omitempty"`
	PtypeIn           []string `json:"ptypeIn,omitempty"`
	PtypeNotIn        []string `json:"ptypeNotIn,omitempty"`
	PtypeGT           *string  `json:"ptypeGT,omitempty"`
	PtypeGTE          *string  `json:"ptypeGTE,omitempty"`
	PtypeLT           *string  `json:"ptypeLT,omitempty"`
	PtypeLTE          *string  `json:"ptypeLTE,omitempty"`
	PtypeContains     *string  `json:"ptypeContains,omitempty"`
	PtypeHasPrefix    *string  `json:"ptypeHasPrefix,omitempty"`
	PtypeHasSuffix    *string  `json:"ptypeHasSuffix,omitempty"`
	PtypeEqualFold    *string  `json:"ptypeEqualFold,omitempty"`
	PtypeContainsFold *string  `json:"ptypeContainsFold,omitempty"`

	// "V0" field predicates.
	V0             *string  `json:"v0,omitempty"`
	V0NEQ          *string  `json:"v0NEQ,omitempty"`
	V0In           []string `json:"v0In,omitempty"`
	V0NotIn        []string `json:"v0NotIn,omitempty"`
	V0GT           *string  `json:"v0GT,omitempty"`
	V0GTE          *string  `json:"v0GTE,omitempty"`
	V0LT           *string  `json:"v0LT,omitempty"`
	V0LTE          *string  `json:"v0LTE,omitempty"`
	V0Contains     *string  `json:"v0Contains,omitempty"`
	V0HasPrefix    *string  `json:"v0HasPrefix,omitempty"`
	V0HasSuffix    *string  `json:"v0HasSuffix,omitempty"`
	V0EqualFold    *string  `json:"v0EqualFold,omitempty"`
	V0ContainsFold *string  `json:"v0ContainsFold,omitempty"`

	// "V1" field predicates.
	V1             *string  `json:"v1,omitempty"`
	V1NEQ          *string  `json:"v1NEQ,omitempty"`
	V1In           []string `json:"v1In,omitempty"`
	V1NotIn        []string `json:"v1NotIn,omitempty"`
	V1GT           *string  `json:"v1GT,omitempty"`
	V1GTE          *string  `json:"v1GTE,omitempty"`
	V1LT           *string  `json:"v1LT,omitempty"`
	V1LTE          *string  `json:"v1LTE,omitempty"`
	V1Contains     *string  `json:"v1Contains,omitempty"`
	V1HasPrefix    *string  `json:"v1HasPrefix,omitempty"`
	V1HasSuffix    *string  `json:"v1HasSuffix,omitempty"`
	V1EqualFold    *string  `json:"v1EqualFold,omitempty"`
	V1ContainsFold *string  `json:"v1ContainsFold,omitempty"`

	// "V2" field predicates.
	V2             *string  `json:"v2,omitempty"`
	V2NEQ          *string  `json:"v2NEQ,omitempty"`
	V2In           []string `json:"v2In,omitempty"`
	V2NotIn        []string `json:"v2NotIn,omitempty"`
	V2GT           *string  `json:"v2GT,omitempty"`
	V2GTE          *string  `json:"v2GTE,omitempty"`
	V2LT           *string  `json:"v2LT,omitempty"`
	V2LTE          *string  `json:"v2LTE,omitempty"`
	V2Contains     *string  `json:"v2Contains,omitempty"`
	V2HasPrefix    *string  `json:"v2HasPrefix,omitempty"`
	V2HasSuffix    *string  `json:"v2HasSuffix,omitempty"`
	V2EqualFold    *string  `json:"v2EqualFold,omitempty"`
	V2ContainsFold *string  `json:"v2ContainsFold,omitempty"`

	// "V3" field predicates.
	V3             *string  `json:"v3,omitempty"`
	V3NEQ          *string  `json:"v3NEQ,omitempty"`
	V3In           []string `json:"v3In,omitempty"`
	V3NotIn        []string `json:"v3NotIn,omitempty"`
	V3GT           *string  `json:"v3GT,omitempty"`
	V3GTE          *string  `json:"v3GTE,omitempty"`
	V3LT           *string  `json:"v3LT,omitempty"`
	V3LTE          *string  `json:"v3LTE,omitempty"`
	V3Contains     *string  `json:"v3Contains,omitempty"`
	V3HasPrefix    *string  `json:"v3HasPrefix,omitempty"`
	V3HasSuffix    *string  `json:"v3HasSuffix,omitempty"`
	V3EqualFold    *string  `json:"v3EqualFold,omitempty"`
	V3ContainsFold *string  `json:"v3ContainsFold,omitempty"`

	// "V4" field predicates.
	V4             *string  `json:"v4,omitempty"`
	V4NEQ          *string  `json:"v4NEQ,omitempty"`
	V4In           []string `json:"v4In,omitempty"`
	V4NotIn        []string `json:"v4NotIn,omitempty"`
	V4GT           *string  `json:"v4GT,omitempty"`
	V4GTE          *string  `json:"v4GTE,omitempty"`
	V4LT           *string  `json:"v4LT,omitempty"`
	V4LTE          *string  `json:"v4LTE,omitempty"`
	V4Contains     *string  `json:"v4Contains,omitempty"`
	V4HasPrefix    *string  `json:"v4HasPrefix,omitempty"`
	V4HasSuffix    *string  `json:"v4HasSuffix,omitempty"`
	V4EqualFold    *string  `json:"v4EqualFold,omitempty"`
	V4ContainsFold *string  `json:"v4ContainsFold,omitempty"`

	// "V5" field predicates.
	V5             *string  `json:"v5,omitempty"`
	V5NEQ          *string  `json:"v5NEQ,omitempty"`
	V5In           []string `json:"v5In,omitempty"`
	V5NotIn        []string `json:"v5NotIn,omitempty"`
	V5GT           *string  `json:"v5GT,omitempty"`
	V5GTE          *string  `json:"v5GTE,omitempty"`
	V5LT           *string  `json:"v5LT,omitempty"`
	V5LTE          *string  `json:"v5LTE,omitempty"`
	V5Contains     *string  `json:"v5Contains,omitempty"`
	V5HasPrefix    *string  `json:"v5HasPrefix,omitempty"`
	V5HasSuffix    *string  `json:"v5HasSuffix,omitempty"`
	V5EqualFold    *string  `json:"v5EqualFold,omitempty"`
	V5ContainsFold *string  `json:"v5ContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CasbinRuleWhereInput) AddPredicates(predicates ...predicate.CasbinRule) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CasbinRuleWhereInput filter on the CasbinRuleQuery builder.
func (i *CasbinRuleWhereInput) Filter(q *CasbinRuleQuery) (*CasbinRuleQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCasbinRuleWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCasbinRuleWhereInput is returned in case the CasbinRuleWhereInput is empty.
var ErrEmptyCasbinRuleWhereInput = errors.New("ent: empty predicate CasbinRuleWhereInput")

// P returns a predicate for filtering casbinrules.
// An error is returned if the input is empty or invalid.
func (i *CasbinRuleWhereInput) P() (predicate.CasbinRule, error) {
	var predicates []predicate.CasbinRule
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, casbinrule.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.CasbinRule, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, casbinrule.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.CasbinRule, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, casbinrule.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, casbinrule.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, casbinrule.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, casbinrule.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, casbinrule.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, casbinrule.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, casbinrule.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, casbinrule.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, casbinrule.IDLTE(*i.IDLTE))
	}
	if i.Ptype != nil {
		predicates = append(predicates, casbinrule.PtypeEQ(*i.Ptype))
	}
	if i.PtypeNEQ != nil {
		predicates = append(predicates, casbinrule.PtypeNEQ(*i.PtypeNEQ))
	}
	if len(i.PtypeIn) > 0 {
		predicates = append(predicates, casbinrule.PtypeIn(i.PtypeIn...))
	}
	if len(i.PtypeNotIn) > 0 {
		predicates = append(predicates, casbinrule.PtypeNotIn(i.PtypeNotIn...))
	}
	if i.PtypeGT != nil {
		predicates = append(predicates, casbinrule.PtypeGT(*i.PtypeGT))
	}
	if i.PtypeGTE != nil {
		predicates = append(predicates, casbinrule.PtypeGTE(*i.PtypeGTE))
	}
	if i.PtypeLT != nil {
		predicates = append(predicates, casbinrule.PtypeLT(*i.PtypeLT))
	}
	if i.PtypeLTE != nil {
		predicates = append(predicates, casbinrule.PtypeLTE(*i.PtypeLTE))
	}
	if i.PtypeContains != nil {
		predicates = append(predicates, casbinrule.PtypeContains(*i.PtypeContains))
	}
	if i.PtypeHasPrefix != nil {
		predicates = append(predicates, casbinrule.PtypeHasPrefix(*i.PtypeHasPrefix))
	}
	if i.PtypeHasSuffix != nil {
		predicates = append(predicates, casbinrule.PtypeHasSuffix(*i.PtypeHasSuffix))
	}
	if i.PtypeEqualFold != nil {
		predicates = append(predicates, casbinrule.PtypeEqualFold(*i.PtypeEqualFold))
	}
	if i.PtypeContainsFold != nil {
		predicates = append(predicates, casbinrule.PtypeContainsFold(*i.PtypeContainsFold))
	}
	if i.V0 != nil {
		predicates = append(predicates, casbinrule.V0EQ(*i.V0))
	}
	if i.V0NEQ != nil {
		predicates = append(predicates, casbinrule.V0NEQ(*i.V0NEQ))
	}
	if len(i.V0In) > 0 {
		predicates = append(predicates, casbinrule.V0In(i.V0In...))
	}
	if len(i.V0NotIn) > 0 {
		predicates = append(predicates, casbinrule.V0NotIn(i.V0NotIn...))
	}
	if i.V0GT != nil {
		predicates = append(predicates, casbinrule.V0GT(*i.V0GT))
	}
	if i.V0GTE != nil {
		predicates = append(predicates, casbinrule.V0GTE(*i.V0GTE))
	}
	if i.V0LT != nil {
		predicates = append(predicates, casbinrule.V0LT(*i.V0LT))
	}
	if i.V0LTE != nil {
		predicates = append(predicates, casbinrule.V0LTE(*i.V0LTE))
	}
	if i.V0Contains != nil {
		predicates = append(predicates, casbinrule.V0Contains(*i.V0Contains))
	}
	if i.V0HasPrefix != nil {
		predicates = append(predicates, casbinrule.V0HasPrefix(*i.V0HasPrefix))
	}
	if i.V0HasSuffix != nil {
		predicates = append(predicates, casbinrule.V0HasSuffix(*i.V0HasSuffix))
	}
	if i.V0EqualFold != nil {
		predicates = append(predicates, casbinrule.V0EqualFold(*i.V0EqualFold))
	}
	if i.V0ContainsFold != nil {
		predicates = append(predicates, casbinrule.V0ContainsFold(*i.V0ContainsFold))
	}
	if i.V1 != nil {
		predicates = append(predicates, casbinrule.V1EQ(*i.V1))
	}
	if i.V1NEQ != nil {
		predicates = append(predicates, casbinrule.V1NEQ(*i.V1NEQ))
	}
	if len(i.V1In) > 0 {
		predicates = append(predicates, casbinrule.V1In(i.V1In...))
	}
	if len(i.V1NotIn) > 0 {
		predicates = append(predicates, casbinrule.V1NotIn(i.V1NotIn...))
	}
	if i.V1GT != nil {
		predicates = append(predicates, casbinrule.V1GT(*i.V1GT))
	}
	if i.V1GTE != nil {
		predicates = append(predicates, casbinrule.V1GTE(*i.V1GTE))
	}
	if i.V1LT != nil {
		predicates = append(predicates, casbinrule.V1LT(*i.V1LT))
	}
	if i.V1LTE != nil {
		predicates = append(predicates, casbinrule.V1LTE(*i.V1LTE))
	}
	if i.V1Contains != nil {
		predicates = append(predicates, casbinrule.V1Contains(*i.V1Contains))
	}
	if i.V1HasPrefix != nil {
		predicates = append(predicates, casbinrule.V1HasPrefix(*i.V1HasPrefix))
	}
	if i.V1HasSuffix != nil {
		predicates = append(predicates, casbinrule.V1HasSuffix(*i.V1HasSuffix))
	}
	if i.V1EqualFold != nil {
		predicates = append(predicates, casbinrule.V1EqualFold(*i.V1EqualFold))
	}
	if i.V1ContainsFold != nil {
		predicates = append(predicates, casbinrule.V1ContainsFold(*i.V1ContainsFold))
	}
	if i.V2 != nil {
		predicates = append(predicates, casbinrule.V2EQ(*i.V2))
	}
	if i.V2NEQ != nil {
		predicates = append(predicates, casbinrule.V2NEQ(*i.V2NEQ))
	}
	if len(i.V2In) > 0 {
		predicates = append(predicates, casbinrule.V2In(i.V2In...))
	}
	if len(i.V2NotIn) > 0 {
		predicates = append(predicates, casbinrule.V2NotIn(i.V2NotIn...))
	}
	if i.V2GT != nil {
		predicates = append(predicates, casbinrule.V2GT(*i.V2GT))
	}
	if i.V2GTE != nil {
		predicates = append(predicates, casbinrule.V2GTE(*i.V2GTE))
	}
	if i.V2LT != nil {
		predicates = append(predicates, casbinrule.V2LT(*i.V2LT))
	}
	if i.V2LTE != nil {
		predicates = append(predicates, casbinrule.V2LTE(*i.V2LTE))
	}
	if i.V2Contains != nil {
		predicates = append(predicates, casbinrule.V2Contains(*i.V2Contains))
	}
	if i.V2HasPrefix != nil {
		predicates = append(predicates, casbinrule.V2HasPrefix(*i.V2HasPrefix))
	}
	if i.V2HasSuffix != nil {
		predicates = append(predicates, casbinrule.V2HasSuffix(*i.V2HasSuffix))
	}
	if i.V2EqualFold != nil {
		predicates = append(predicates, casbinrule.V2EqualFold(*i.V2EqualFold))
	}
	if i.V2ContainsFold != nil {
		predicates = append(predicates, casbinrule.V2ContainsFold(*i.V2ContainsFold))
	}
	if i.V3 != nil {
		predicates = append(predicates, casbinrule.V3EQ(*i.V3))
	}
	if i.V3NEQ != nil {
		predicates = append(predicates, casbinrule.V3NEQ(*i.V3NEQ))
	}
	if len(i.V3In) > 0 {
		predicates = append(predicates, casbinrule.V3In(i.V3In...))
	}
	if len(i.V3NotIn) > 0 {
		predicates = append(predicates, casbinrule.V3NotIn(i.V3NotIn...))
	}
	if i.V3GT != nil {
		predicates = append(predicates, casbinrule.V3GT(*i.V3GT))
	}
	if i.V3GTE != nil {
		predicates = append(predicates, casbinrule.V3GTE(*i.V3GTE))
	}
	if i.V3LT != nil {
		predicates = append(predicates, casbinrule.V3LT(*i.V3LT))
	}
	if i.V3LTE != nil {
		predicates = append(predicates, casbinrule.V3LTE(*i.V3LTE))
	}
	if i.V3Contains != nil {
		predicates = append(predicates, casbinrule.V3Contains(*i.V3Contains))
	}
	if i.V3HasPrefix != nil {
		predicates = append(predicates, casbinrule.V3HasPrefix(*i.V3HasPrefix))
	}
	if i.V3HasSuffix != nil {
		predicates = append(predicates, casbinrule.V3HasSuffix(*i.V3HasSuffix))
	}
	if i.V3EqualFold != nil {
		predicates = append(predicates, casbinrule.V3EqualFold(*i.V3EqualFold))
	}
	if i.V3ContainsFold != nil {
		predicates = append(predicates, casbinrule.V3ContainsFold(*i.V3ContainsFold))
	}
	if i.V4 != nil {
		predicates = append(predicates, casbinrule.V4EQ(*i.V4))
	}
	if i.V4NEQ != nil {
		predicates = append(predicates, casbinrule.V4NEQ(*i.V4NEQ))
	}
	if len(i.V4In) > 0 {
		predicates = append(predicates, casbinrule.V4In(i.V4In...))
	}
	if len(i.V4NotIn) > 0 {
		predicates = append(predicates, casbinrule.V4NotIn(i.V4NotIn...))
	}
	if i.V4GT != nil {
		predicates = append(predicates, casbinrule.V4GT(*i.V4GT))
	}
	if i.V4GTE != nil {
		predicates = append(predicates, casbinrule.V4GTE(*i.V4GTE))
	}
	if i.V4LT != nil {
		predicates = append(predicates, casbinrule.V4LT(*i.V4LT))
	}
	if i.V4LTE != nil {
		predicates = append(predicates, casbinrule.V4LTE(*i.V4LTE))
	}
	if i.V4Contains != nil {
		predicates = append(predicates, casbinrule.V4Contains(*i.V4Contains))
	}
	if i.V4HasPrefix != nil {
		predicates = append(predicates, casbinrule.V4HasPrefix(*i.V4HasPrefix))
	}
	if i.V4HasSuffix != nil {
		predicates = append(predicates, casbinrule.V4HasSuffix(*i.V4HasSuffix))
	}
	if i.V4EqualFold != nil {
		predicates = append(predicates, casbinrule.V4EqualFold(*i.V4EqualFold))
	}
	if i.V4ContainsFold != nil {
		predicates = append(predicates, casbinrule.V4ContainsFold(*i.V4ContainsFold))
	}
	if i.V5 != nil {
		predicates = append(predicates, casbinrule.V5EQ(*i.V5))
	}
	if i.V5NEQ != nil {
		predicates = append(predicates, casbinrule.V5NEQ(*i.V5NEQ))
	}
	if len(i.V5In) > 0 {
		predicates = append(predicates, casbinrule.V5In(i.V5In...))
	}
	if len(i.V5NotIn) > 0 {
		predicates = append(predicates, casbinrule.V5NotIn(i.V5NotIn...))
	}
	if i.V5GT != nil {
		predicates = append(predicates, casbinrule.V5GT(*i.V5GT))
	}
	if i.V5GTE != nil {
		predicates = append(predicates, casbinrule.V5GTE(*i.V5GTE))
	}
	if i.V5LT != nil {
		predicates = append(predicates, casbinrule.V5LT(*i.V5LT))
	}
	if i.V5LTE != nil {
		predicates = append(predicates, casbinrule.V5LTE(*i.V5LTE))
	}
	if i.V5Contains != nil {
		predicates = append(predicates, casbinrule.V5Contains(*i.V5Contains))
	}
	if i.V5HasPrefix != nil {
		predicates = append(predicates, casbinrule.V5HasPrefix(*i.V5HasPrefix))
	}
	if i.V5HasSuffix != nil {
		predicates = append(predicates, casbinrule.V5HasSuffix(*i.V5HasSuffix))
	}
	if i.V5EqualFold != nil {
		predicates = append(predicates, casbinrule.V5EqualFold(*i.V5EqualFold))
	}
	if i.V5ContainsFold != nil {
		predicates = append(predicates, casbinrule.V5ContainsFold(*i.V5ContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCasbinRuleWhereInput
	case 1:
		return predicates[0], nil
	default:
		return casbinrule.And(predicates...), nil
	}
}

// PublicKeyWhereInput represents a where input for filtering PublicKey queries.
type PublicKeyWhereInput struct {
	Predicates []predicate.PublicKey  `json:"-"`
	Not        *PublicKeyWhereInput   `json:"not,omitempty"`
	Or         []*PublicKeyWhereInput `json:"or,omitempty"`
	And        []*PublicKeyWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "key" field predicates.
	Key             *string  `json:"key,omitempty"`
	KeyNEQ          *string  `json:"keyNEQ,omitempty"`
	KeyIn           []string `json:"keyIn,omitempty"`
	KeyNotIn        []string `json:"keyNotIn,omitempty"`
	KeyGT           *string  `json:"keyGT,omitempty"`
	KeyGTE          *string  `json:"keyGTE,omitempty"`
	KeyLT           *string  `json:"keyLT,omitempty"`
	KeyLTE          *string  `json:"keyLTE,omitempty"`
	KeyContains     *string  `json:"keyContains,omitempty"`
	KeyHasPrefix    *string  `json:"keyHasPrefix,omitempty"`
	KeyHasSuffix    *string  `json:"keyHasSuffix,omitempty"`
	KeyEqualFold    *string  `json:"keyEqualFold,omitempty"`
	KeyContainsFold *string  `json:"keyContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "type" field predicates.
	Type             *string  `json:"type,omitempty"`
	TypeNEQ          *string  `json:"typeNEQ,omitempty"`
	TypeIn           []string `json:"typeIn,omitempty"`
	TypeNotIn        []string `json:"typeNotIn,omitempty"`
	TypeGT           *string  `json:"typeGT,omitempty"`
	TypeGTE          *string  `json:"typeGTE,omitempty"`
	TypeLT           *string  `json:"typeLT,omitempty"`
	TypeLTE          *string  `json:"typeLTE,omitempty"`
	TypeContains     *string  `json:"typeContains,omitempty"`
	TypeHasPrefix    *string  `json:"typeHasPrefix,omitempty"`
	TypeHasSuffix    *string  `json:"typeHasSuffix,omitempty"`
	TypeIsNil        bool     `json:"typeIsNil,omitempty"`
	TypeNotNil       bool     `json:"typeNotNil,omitempty"`
	TypeEqualFold    *string  `json:"typeEqualFold,omitempty"`
	TypeContainsFold *string  `json:"typeContainsFold,omitempty"`

	// "status" field predicates.
	Status             *string  `json:"status,omitempty"`
	StatusNEQ          *string  `json:"statusNEQ,omitempty"`
	StatusIn           []string `json:"statusIn,omitempty"`
	StatusNotIn        []string `json:"statusNotIn,omitempty"`
	StatusGT           *string  `json:"statusGT,omitempty"`
	StatusGTE          *string  `json:"statusGTE,omitempty"`
	StatusLT           *string  `json:"statusLT,omitempty"`
	StatusLTE          *string  `json:"statusLTE,omitempty"`
	StatusContains     *string  `json:"statusContains,omitempty"`
	StatusHasPrefix    *string  `json:"statusHasPrefix,omitempty"`
	StatusHasSuffix    *string  `json:"statusHasSuffix,omitempty"`
	StatusIsNil        bool     `json:"statusIsNil,omitempty"`
	StatusNotNil       bool     `json:"statusNotNil,omitempty"`
	StatusEqualFold    *string  `json:"statusEqualFold,omitempty"`
	StatusContainsFold *string  `json:"statusContainsFold,omitempty"`

	// "expired_at" field predicates.
	ExpiredAt       *time.Time  `json:"expiredAt,omitempty"`
	ExpiredAtNEQ    *time.Time  `json:"expiredAtNEQ,omitempty"`
	ExpiredAtIn     []time.Time `json:"expiredAtIn,omitempty"`
	ExpiredAtNotIn  []time.Time `json:"expiredAtNotIn,omitempty"`
	ExpiredAtGT     *time.Time  `json:"expiredAtGT,omitempty"`
	ExpiredAtGTE    *time.Time  `json:"expiredAtGTE,omitempty"`
	ExpiredAtLT     *time.Time  `json:"expiredAtLT,omitempty"`
	ExpiredAtLTE    *time.Time  `json:"expiredAtLTE,omitempty"`
	ExpiredAtIsNil  bool        `json:"expiredAtIsNil,omitempty"`
	ExpiredAtNotNil bool        `json:"expiredAtNotNil,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PublicKeyWhereInput) AddPredicates(predicates ...predicate.PublicKey) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PublicKeyWhereInput filter on the PublicKeyQuery builder.
func (i *PublicKeyWhereInput) Filter(q *PublicKeyQuery) (*PublicKeyQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPublicKeyWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPublicKeyWhereInput is returned in case the PublicKeyWhereInput is empty.
var ErrEmptyPublicKeyWhereInput = errors.New("ent: empty predicate PublicKeyWhereInput")

// P returns a predicate for filtering publickeys.
// An error is returned if the input is empty or invalid.
func (i *PublicKeyWhereInput) P() (predicate.PublicKey, error) {
	var predicates []predicate.PublicKey
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, publickey.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.PublicKey, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, publickey.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.PublicKey, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, publickey.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, publickey.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, publickey.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, publickey.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, publickey.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, publickey.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, publickey.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, publickey.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, publickey.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, publickey.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, publickey.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, publickey.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, publickey.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, publickey.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, publickey.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, publickey.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, publickey.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, publickey.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, publickey.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, publickey.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, publickey.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, publickey.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, publickey.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, publickey.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, publickey.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Key != nil {
		predicates = append(predicates, publickey.KeyEQ(*i.Key))
	}
	if i.KeyNEQ != nil {
		predicates = append(predicates, publickey.KeyNEQ(*i.KeyNEQ))
	}
	if len(i.KeyIn) > 0 {
		predicates = append(predicates, publickey.KeyIn(i.KeyIn...))
	}
	if len(i.KeyNotIn) > 0 {
		predicates = append(predicates, publickey.KeyNotIn(i.KeyNotIn...))
	}
	if i.KeyGT != nil {
		predicates = append(predicates, publickey.KeyGT(*i.KeyGT))
	}
	if i.KeyGTE != nil {
		predicates = append(predicates, publickey.KeyGTE(*i.KeyGTE))
	}
	if i.KeyLT != nil {
		predicates = append(predicates, publickey.KeyLT(*i.KeyLT))
	}
	if i.KeyLTE != nil {
		predicates = append(predicates, publickey.KeyLTE(*i.KeyLTE))
	}
	if i.KeyContains != nil {
		predicates = append(predicates, publickey.KeyContains(*i.KeyContains))
	}
	if i.KeyHasPrefix != nil {
		predicates = append(predicates, publickey.KeyHasPrefix(*i.KeyHasPrefix))
	}
	if i.KeyHasSuffix != nil {
		predicates = append(predicates, publickey.KeyHasSuffix(*i.KeyHasSuffix))
	}
	if i.KeyEqualFold != nil {
		predicates = append(predicates, publickey.KeyEqualFold(*i.KeyEqualFold))
	}
	if i.KeyContainsFold != nil {
		predicates = append(predicates, publickey.KeyContainsFold(*i.KeyContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, publickey.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, publickey.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, publickey.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, publickey.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, publickey.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, publickey.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, publickey.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, publickey.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, publickey.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, publickey.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, publickey.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, publickey.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, publickey.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, publickey.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, publickey.NameContainsFold(*i.NameContainsFold))
	}
	if i.Description != nil {
		predicates = append(predicates, publickey.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, publickey.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, publickey.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, publickey.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, publickey.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, publickey.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, publickey.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, publickey.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, publickey.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, publickey.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, publickey.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, publickey.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, publickey.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, publickey.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, publickey.DescriptionContainsFold(*i.DescriptionContainsFold))
	}
	if i.Type != nil {
		predicates = append(predicates, publickey.TypeEQ(*i.Type))
	}
	if i.TypeNEQ != nil {
		predicates = append(predicates, publickey.TypeNEQ(*i.TypeNEQ))
	}
	if len(i.TypeIn) > 0 {
		predicates = append(predicates, publickey.TypeIn(i.TypeIn...))
	}
	if len(i.TypeNotIn) > 0 {
		predicates = append(predicates, publickey.TypeNotIn(i.TypeNotIn...))
	}
	if i.TypeGT != nil {
		predicates = append(predicates, publickey.TypeGT(*i.TypeGT))
	}
	if i.TypeGTE != nil {
		predicates = append(predicates, publickey.TypeGTE(*i.TypeGTE))
	}
	if i.TypeLT != nil {
		predicates = append(predicates, publickey.TypeLT(*i.TypeLT))
	}
	if i.TypeLTE != nil {
		predicates = append(predicates, publickey.TypeLTE(*i.TypeLTE))
	}
	if i.TypeContains != nil {
		predicates = append(predicates, publickey.TypeContains(*i.TypeContains))
	}
	if i.TypeHasPrefix != nil {
		predicates = append(predicates, publickey.TypeHasPrefix(*i.TypeHasPrefix))
	}
	if i.TypeHasSuffix != nil {
		predicates = append(predicates, publickey.TypeHasSuffix(*i.TypeHasSuffix))
	}
	if i.TypeIsNil {
		predicates = append(predicates, publickey.TypeIsNil())
	}
	if i.TypeNotNil {
		predicates = append(predicates, publickey.TypeNotNil())
	}
	if i.TypeEqualFold != nil {
		predicates = append(predicates, publickey.TypeEqualFold(*i.TypeEqualFold))
	}
	if i.TypeContainsFold != nil {
		predicates = append(predicates, publickey.TypeContainsFold(*i.TypeContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, publickey.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, publickey.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, publickey.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, publickey.StatusNotIn(i.StatusNotIn...))
	}
	if i.StatusGT != nil {
		predicates = append(predicates, publickey.StatusGT(*i.StatusGT))
	}
	if i.StatusGTE != nil {
		predicates = append(predicates, publickey.StatusGTE(*i.StatusGTE))
	}
	if i.StatusLT != nil {
		predicates = append(predicates, publickey.StatusLT(*i.StatusLT))
	}
	if i.StatusLTE != nil {
		predicates = append(predicates, publickey.StatusLTE(*i.StatusLTE))
	}
	if i.StatusContains != nil {
		predicates = append(predicates, publickey.StatusContains(*i.StatusContains))
	}
	if i.StatusHasPrefix != nil {
		predicates = append(predicates, publickey.StatusHasPrefix(*i.StatusHasPrefix))
	}
	if i.StatusHasSuffix != nil {
		predicates = append(predicates, publickey.StatusHasSuffix(*i.StatusHasSuffix))
	}
	if i.StatusIsNil {
		predicates = append(predicates, publickey.StatusIsNil())
	}
	if i.StatusNotNil {
		predicates = append(predicates, publickey.StatusNotNil())
	}
	if i.StatusEqualFold != nil {
		predicates = append(predicates, publickey.StatusEqualFold(*i.StatusEqualFold))
	}
	if i.StatusContainsFold != nil {
		predicates = append(predicates, publickey.StatusContainsFold(*i.StatusContainsFold))
	}
	if i.ExpiredAt != nil {
		predicates = append(predicates, publickey.ExpiredAtEQ(*i.ExpiredAt))
	}
	if i.ExpiredAtNEQ != nil {
		predicates = append(predicates, publickey.ExpiredAtNEQ(*i.ExpiredAtNEQ))
	}
	if len(i.ExpiredAtIn) > 0 {
		predicates = append(predicates, publickey.ExpiredAtIn(i.ExpiredAtIn...))
	}
	if len(i.ExpiredAtNotIn) > 0 {
		predicates = append(predicates, publickey.ExpiredAtNotIn(i.ExpiredAtNotIn...))
	}
	if i.ExpiredAtGT != nil {
		predicates = append(predicates, publickey.ExpiredAtGT(*i.ExpiredAtGT))
	}
	if i.ExpiredAtGTE != nil {
		predicates = append(predicates, publickey.ExpiredAtGTE(*i.ExpiredAtGTE))
	}
	if i.ExpiredAtLT != nil {
		predicates = append(predicates, publickey.ExpiredAtLT(*i.ExpiredAtLT))
	}
	if i.ExpiredAtLTE != nil {
		predicates = append(predicates, publickey.ExpiredAtLTE(*i.ExpiredAtLTE))
	}
	if i.ExpiredAtIsNil {
		predicates = append(predicates, publickey.ExpiredAtIsNil())
	}
	if i.ExpiredAtNotNil {
		predicates = append(predicates, publickey.ExpiredAtNotNil())
	}

	if i.HasUser != nil {
		p := publickey.HasUser()
		if !*i.HasUser {
			p = publickey.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, publickey.HasUserWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPublicKeyWhereInput
	case 1:
		return predicates[0], nil
	default:
		return publickey.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "nickname" field predicates.
	Nickname             *string  `json:"nickname,omitempty"`
	NicknameNEQ          *string  `json:"nicknameNEQ,omitempty"`
	NicknameIn           []string `json:"nicknameIn,omitempty"`
	NicknameNotIn        []string `json:"nicknameNotIn,omitempty"`
	NicknameGT           *string  `json:"nicknameGT,omitempty"`
	NicknameGTE          *string  `json:"nicknameGTE,omitempty"`
	NicknameLT           *string  `json:"nicknameLT,omitempty"`
	NicknameLTE          *string  `json:"nicknameLTE,omitempty"`
	NicknameContains     *string  `json:"nicknameContains,omitempty"`
	NicknameHasPrefix    *string  `json:"nicknameHasPrefix,omitempty"`
	NicknameHasSuffix    *string  `json:"nicknameHasSuffix,omitempty"`
	NicknameIsNil        bool     `json:"nicknameIsNil,omitempty"`
	NicknameNotNil       bool     `json:"nicknameNotNil,omitempty"`
	NicknameEqualFold    *string  `json:"nicknameEqualFold,omitempty"`
	NicknameContainsFold *string  `json:"nicknameContainsFold,omitempty"`

	// "username" field predicates.
	Username             *string  `json:"username,omitempty"`
	UsernameNEQ          *string  `json:"usernameNEQ,omitempty"`
	UsernameIn           []string `json:"usernameIn,omitempty"`
	UsernameNotIn        []string `json:"usernameNotIn,omitempty"`
	UsernameGT           *string  `json:"usernameGT,omitempty"`
	UsernameGTE          *string  `json:"usernameGTE,omitempty"`
	UsernameLT           *string  `json:"usernameLT,omitempty"`
	UsernameLTE          *string  `json:"usernameLTE,omitempty"`
	UsernameContains     *string  `json:"usernameContains,omitempty"`
	UsernameHasPrefix    *string  `json:"usernameHasPrefix,omitempty"`
	UsernameHasSuffix    *string  `json:"usernameHasSuffix,omitempty"`
	UsernameIsNil        bool     `json:"usernameIsNil,omitempty"`
	UsernameNotNil       bool     `json:"usernameNotNil,omitempty"`
	UsernameEqualFold    *string  `json:"usernameEqualFold,omitempty"`
	UsernameContainsFold *string  `json:"usernameContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailIsNil        bool     `json:"emailIsNil,omitempty"`
	EmailNotNil       bool     `json:"emailNotNil,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "phone" field predicates.
	Phone             *string  `json:"phone,omitempty"`
	PhoneNEQ          *string  `json:"phoneNEQ,omitempty"`
	PhoneIn           []string `json:"phoneIn,omitempty"`
	PhoneNotIn        []string `json:"phoneNotIn,omitempty"`
	PhoneGT           *string  `json:"phoneGT,omitempty"`
	PhoneGTE          *string  `json:"phoneGTE,omitempty"`
	PhoneLT           *string  `json:"phoneLT,omitempty"`
	PhoneLTE          *string  `json:"phoneLTE,omitempty"`
	PhoneContains     *string  `json:"phoneContains,omitempty"`
	PhoneHasPrefix    *string  `json:"phoneHasPrefix,omitempty"`
	PhoneHasSuffix    *string  `json:"phoneHasSuffix,omitempty"`
	PhoneEqualFold    *string  `json:"phoneEqualFold,omitempty"`
	PhoneContainsFold *string  `json:"phoneContainsFold,omitempty"`

	// "password" field predicates.
	Password             *string  `json:"password,omitempty"`
	PasswordNEQ          *string  `json:"passwordNEQ,omitempty"`
	PasswordIn           []string `json:"passwordIn,omitempty"`
	PasswordNotIn        []string `json:"passwordNotIn,omitempty"`
	PasswordGT           *string  `json:"passwordGT,omitempty"`
	PasswordGTE          *string  `json:"passwordGTE,omitempty"`
	PasswordLT           *string  `json:"passwordLT,omitempty"`
	PasswordLTE          *string  `json:"passwordLTE,omitempty"`
	PasswordContains     *string  `json:"passwordContains,omitempty"`
	PasswordHasPrefix    *string  `json:"passwordHasPrefix,omitempty"`
	PasswordHasSuffix    *string  `json:"passwordHasSuffix,omitempty"`
	PasswordEqualFold    *string  `json:"passwordEqualFold,omitempty"`
	PasswordContainsFold *string  `json:"passwordContainsFold,omitempty"`

	// "children" edge predicates.
	HasChildren     *bool             `json:"hasChildren,omitempty"`
	HasChildrenWith []*UserWhereInput `json:"hasChildrenWith,omitempty"`

	// "parent" edge predicates.
	HasParent     *bool             `json:"hasParent,omitempty"`
	HasParentWith []*UserWhereInput `json:"hasParentWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, user.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, user.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, user.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, user.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, user.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, user.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, user.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, user.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, user.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, user.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, user.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, user.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, user.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, user.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, user.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, user.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Nickname != nil {
		predicates = append(predicates, user.NicknameEQ(*i.Nickname))
	}
	if i.NicknameNEQ != nil {
		predicates = append(predicates, user.NicknameNEQ(*i.NicknameNEQ))
	}
	if len(i.NicknameIn) > 0 {
		predicates = append(predicates, user.NicknameIn(i.NicknameIn...))
	}
	if len(i.NicknameNotIn) > 0 {
		predicates = append(predicates, user.NicknameNotIn(i.NicknameNotIn...))
	}
	if i.NicknameGT != nil {
		predicates = append(predicates, user.NicknameGT(*i.NicknameGT))
	}
	if i.NicknameGTE != nil {
		predicates = append(predicates, user.NicknameGTE(*i.NicknameGTE))
	}
	if i.NicknameLT != nil {
		predicates = append(predicates, user.NicknameLT(*i.NicknameLT))
	}
	if i.NicknameLTE != nil {
		predicates = append(predicates, user.NicknameLTE(*i.NicknameLTE))
	}
	if i.NicknameContains != nil {
		predicates = append(predicates, user.NicknameContains(*i.NicknameContains))
	}
	if i.NicknameHasPrefix != nil {
		predicates = append(predicates, user.NicknameHasPrefix(*i.NicknameHasPrefix))
	}
	if i.NicknameHasSuffix != nil {
		predicates = append(predicates, user.NicknameHasSuffix(*i.NicknameHasSuffix))
	}
	if i.NicknameIsNil {
		predicates = append(predicates, user.NicknameIsNil())
	}
	if i.NicknameNotNil {
		predicates = append(predicates, user.NicknameNotNil())
	}
	if i.NicknameEqualFold != nil {
		predicates = append(predicates, user.NicknameEqualFold(*i.NicknameEqualFold))
	}
	if i.NicknameContainsFold != nil {
		predicates = append(predicates, user.NicknameContainsFold(*i.NicknameContainsFold))
	}
	if i.Username != nil {
		predicates = append(predicates, user.UsernameEQ(*i.Username))
	}
	if i.UsernameNEQ != nil {
		predicates = append(predicates, user.UsernameNEQ(*i.UsernameNEQ))
	}
	if len(i.UsernameIn) > 0 {
		predicates = append(predicates, user.UsernameIn(i.UsernameIn...))
	}
	if len(i.UsernameNotIn) > 0 {
		predicates = append(predicates, user.UsernameNotIn(i.UsernameNotIn...))
	}
	if i.UsernameGT != nil {
		predicates = append(predicates, user.UsernameGT(*i.UsernameGT))
	}
	if i.UsernameGTE != nil {
		predicates = append(predicates, user.UsernameGTE(*i.UsernameGTE))
	}
	if i.UsernameLT != nil {
		predicates = append(predicates, user.UsernameLT(*i.UsernameLT))
	}
	if i.UsernameLTE != nil {
		predicates = append(predicates, user.UsernameLTE(*i.UsernameLTE))
	}
	if i.UsernameContains != nil {
		predicates = append(predicates, user.UsernameContains(*i.UsernameContains))
	}
	if i.UsernameHasPrefix != nil {
		predicates = append(predicates, user.UsernameHasPrefix(*i.UsernameHasPrefix))
	}
	if i.UsernameHasSuffix != nil {
		predicates = append(predicates, user.UsernameHasSuffix(*i.UsernameHasSuffix))
	}
	if i.UsernameIsNil {
		predicates = append(predicates, user.UsernameIsNil())
	}
	if i.UsernameNotNil {
		predicates = append(predicates, user.UsernameNotNil())
	}
	if i.UsernameEqualFold != nil {
		predicates = append(predicates, user.UsernameEqualFold(*i.UsernameEqualFold))
	}
	if i.UsernameContainsFold != nil {
		predicates = append(predicates, user.UsernameContainsFold(*i.UsernameContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, user.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, user.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, user.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, user.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, user.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, user.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, user.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, user.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, user.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, user.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, user.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailIsNil {
		predicates = append(predicates, user.EmailIsNil())
	}
	if i.EmailNotNil {
		predicates = append(predicates, user.EmailNotNil())
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, user.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, user.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.Phone != nil {
		predicates = append(predicates, user.PhoneEQ(*i.Phone))
	}
	if i.PhoneNEQ != nil {
		predicates = append(predicates, user.PhoneNEQ(*i.PhoneNEQ))
	}
	if len(i.PhoneIn) > 0 {
		predicates = append(predicates, user.PhoneIn(i.PhoneIn...))
	}
	if len(i.PhoneNotIn) > 0 {
		predicates = append(predicates, user.PhoneNotIn(i.PhoneNotIn...))
	}
	if i.PhoneGT != nil {
		predicates = append(predicates, user.PhoneGT(*i.PhoneGT))
	}
	if i.PhoneGTE != nil {
		predicates = append(predicates, user.PhoneGTE(*i.PhoneGTE))
	}
	if i.PhoneLT != nil {
		predicates = append(predicates, user.PhoneLT(*i.PhoneLT))
	}
	if i.PhoneLTE != nil {
		predicates = append(predicates, user.PhoneLTE(*i.PhoneLTE))
	}
	if i.PhoneContains != nil {
		predicates = append(predicates, user.PhoneContains(*i.PhoneContains))
	}
	if i.PhoneHasPrefix != nil {
		predicates = append(predicates, user.PhoneHasPrefix(*i.PhoneHasPrefix))
	}
	if i.PhoneHasSuffix != nil {
		predicates = append(predicates, user.PhoneHasSuffix(*i.PhoneHasSuffix))
	}
	if i.PhoneEqualFold != nil {
		predicates = append(predicates, user.PhoneEqualFold(*i.PhoneEqualFold))
	}
	if i.PhoneContainsFold != nil {
		predicates = append(predicates, user.PhoneContainsFold(*i.PhoneContainsFold))
	}
	if i.Password != nil {
		predicates = append(predicates, user.PasswordEQ(*i.Password))
	}
	if i.PasswordNEQ != nil {
		predicates = append(predicates, user.PasswordNEQ(*i.PasswordNEQ))
	}
	if len(i.PasswordIn) > 0 {
		predicates = append(predicates, user.PasswordIn(i.PasswordIn...))
	}
	if len(i.PasswordNotIn) > 0 {
		predicates = append(predicates, user.PasswordNotIn(i.PasswordNotIn...))
	}
	if i.PasswordGT != nil {
		predicates = append(predicates, user.PasswordGT(*i.PasswordGT))
	}
	if i.PasswordGTE != nil {
		predicates = append(predicates, user.PasswordGTE(*i.PasswordGTE))
	}
	if i.PasswordLT != nil {
		predicates = append(predicates, user.PasswordLT(*i.PasswordLT))
	}
	if i.PasswordLTE != nil {
		predicates = append(predicates, user.PasswordLTE(*i.PasswordLTE))
	}
	if i.PasswordContains != nil {
		predicates = append(predicates, user.PasswordContains(*i.PasswordContains))
	}
	if i.PasswordHasPrefix != nil {
		predicates = append(predicates, user.PasswordHasPrefix(*i.PasswordHasPrefix))
	}
	if i.PasswordHasSuffix != nil {
		predicates = append(predicates, user.PasswordHasSuffix(*i.PasswordHasSuffix))
	}
	if i.PasswordEqualFold != nil {
		predicates = append(predicates, user.PasswordEqualFold(*i.PasswordEqualFold))
	}
	if i.PasswordContainsFold != nil {
		predicates = append(predicates, user.PasswordContainsFold(*i.PasswordContainsFold))
	}

	if i.HasChildren != nil {
		p := user.HasChildren()
		if !*i.HasChildren {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasChildrenWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasChildrenWith))
		for _, w := range i.HasChildrenWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasChildrenWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasChildrenWith(with...))
	}
	if i.HasParent != nil {
		p := user.HasParent()
		if !*i.HasParent {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasParentWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasParentWith))
		for _, w := range i.HasParentWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasParentWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasParentWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
