// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/hawa130/computility-cloud/ent/casbinrule"
	"github.com/hawa130/computility-cloud/ent/predicate"
	"github.com/hawa130/computility-cloud/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   casbinrule.Table,
			Columns: casbinrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: casbinrule.FieldID,
			},
		},
		Type: "CasbinRule",
		Fields: map[string]*sqlgraph.FieldSpec{
			casbinrule.FieldPtype: {Type: field.TypeString, Column: casbinrule.FieldPtype},
			casbinrule.FieldV0:    {Type: field.TypeString, Column: casbinrule.FieldV0},
			casbinrule.FieldV1:    {Type: field.TypeString, Column: casbinrule.FieldV1},
			casbinrule.FieldV2:    {Type: field.TypeString, Column: casbinrule.FieldV2},
			casbinrule.FieldV3:    {Type: field.TypeString, Column: casbinrule.FieldV3},
			casbinrule.FieldV4:    {Type: field.TypeString, Column: casbinrule.FieldV4},
			casbinrule.FieldV5:    {Type: field.TypeString, Column: casbinrule.FieldV5},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreatedAt: {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt: {Type: field.TypeTime, Column: user.FieldUpdatedAt},
			user.FieldNickname:  {Type: field.TypeString, Column: user.FieldNickname},
			user.FieldUsername:  {Type: field.TypeString, Column: user.FieldUsername},
			user.FieldEmail:     {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldPhone:     {Type: field.TypeString, Column: user.FieldPhone},
			user.FieldPassword:  {Type: field.TypeString, Column: user.FieldPassword},
		},
	}
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ChildrenTable,
			Columns: []string{user.ChildrenColumn},
			Bidi:    false,
		},
		"User",
		"User",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.ParentTable,
			Columns: []string{user.ParentColumn},
			Bidi:    false,
		},
		"User",
		"User",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (crq *CasbinRuleQuery) addPredicate(pred func(s *sql.Selector)) {
	crq.predicates = append(crq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CasbinRuleQuery builder.
func (crq *CasbinRuleQuery) Filter() *CasbinRuleFilter {
	return &CasbinRuleFilter{config: crq.config, predicateAdder: crq}
}

// addPredicate implements the predicateAdder interface.
func (m *CasbinRuleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CasbinRuleMutation builder.
func (m *CasbinRuleMutation) Filter() *CasbinRuleFilter {
	return &CasbinRuleFilter{config: m.config, predicateAdder: m}
}

// CasbinRuleFilter provides a generic filtering capability at runtime for CasbinRuleQuery.
type CasbinRuleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CasbinRuleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CasbinRuleFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(casbinrule.FieldID))
}

// WherePtype applies the entql string predicate on the Ptype field.
func (f *CasbinRuleFilter) WherePtype(p entql.StringP) {
	f.Where(p.Field(casbinrule.FieldPtype))
}

// WhereV0 applies the entql string predicate on the V0 field.
func (f *CasbinRuleFilter) WhereV0(p entql.StringP) {
	f.Where(p.Field(casbinrule.FieldV0))
}

// WhereV1 applies the entql string predicate on the V1 field.
func (f *CasbinRuleFilter) WhereV1(p entql.StringP) {
	f.Where(p.Field(casbinrule.FieldV1))
}

// WhereV2 applies the entql string predicate on the V2 field.
func (f *CasbinRuleFilter) WhereV2(p entql.StringP) {
	f.Where(p.Field(casbinrule.FieldV2))
}

// WhereV3 applies the entql string predicate on the V3 field.
func (f *CasbinRuleFilter) WhereV3(p entql.StringP) {
	f.Where(p.Field(casbinrule.FieldV3))
}

// WhereV4 applies the entql string predicate on the V4 field.
func (f *CasbinRuleFilter) WhereV4(p entql.StringP) {
	f.Where(p.Field(casbinrule.FieldV4))
}

// WhereV5 applies the entql string predicate on the V5 field.
func (f *CasbinRuleFilter) WhereV5(p entql.StringP) {
	f.Where(p.Field(casbinrule.FieldV5))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *UserFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereNickname applies the entql string predicate on the nickname field.
func (f *UserFilter) WhereNickname(p entql.StringP) {
	f.Where(p.Field(user.FieldNickname))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *UserFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(user.FieldUsername))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *UserFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(user.FieldPhone))
}

// WherePassword applies the entql string predicate on the password field.
func (f *UserFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(user.FieldPassword))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *UserFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *UserFilter) WhereHasChildrenWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *UserFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *UserFilter) WhereHasParentWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
