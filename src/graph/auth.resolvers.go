package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"

	"github.com/hawa130/computility-cloud/ent"
	"github.com/hawa130/computility-cloud/ent/user"
	"github.com/hawa130/computility-cloud/graph/model"
	"github.com/hawa130/computility-cloud/graph/reqerr"
	"github.com/hawa130/computility-cloud/internal/auth"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.LoginPayload, error) {
	record, err := r.client.User.Query().Where(user.PhoneEQ(input.Phone)).Only(ctx)
	if ent.IsNotFound(err) {
		if _, err := auth.HashPassword(input.Password); err != nil {
			return nil, err
		}
		return nil, reqerr.ErrInvalidLoginInput
	}
	if err != nil {
		return nil, err
	}

	ok, err := auth.ComparePasswordAndHash(input.Password, record.Password)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, reqerr.ErrInvalidLoginInput
	}

	token, err := auth.GenerateToken(record.ID)
	if err != nil {
		return nil, err
	}

	return &model.LoginPayload{
		Token: &token,
		User:  record,
	}, nil
}
